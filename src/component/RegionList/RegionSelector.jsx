import React, { useEffect, useState } from 'react';

const RegionSelector = ({ onRegionChange, onWardChange, selectedRegion, selectedWards = [] }) => {
    // Í≥†Ï†ïÎêú ÏßÄÏó≠ Î™©Î°ù (ÌïòÎìúÏΩîÎî©)
    const regions = [
        'Ï†ÑÍµ≠', 'ÏÑúÏö∏ÌäπÎ≥ÑÏãú', 'Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú', 'ÎåÄÍµ¨Í¥ëÏó≠Ïãú', 'Ïù∏Ï≤úÍ¥ëÏó≠Ïãú',
        'Í¥ëÏ£ºÍ¥ëÏó≠Ïãú', 'ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú', 'Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú', 'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú',
        'Í≤ΩÍ∏∞ÎèÑ', 'Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ', 'Ï∂©Ï≤≠Î∂ÅÎèÑ', 'Ï∂©Ï≤≠ÎÇ®ÎèÑ', 'Ï†ÑÎ∂ÅÌäπÎ≥ÑÏûêÏπòÎèÑ',
        'Ï†ÑÎùºÎÇ®ÎèÑ', 'Í≤ΩÏÉÅÎ∂ÅÎèÑ', 'Í≤ΩÏÉÅÎÇ®ÎèÑ', 'Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ'
    ];

    const [wards, setWards] = useState([]);
    const [showModal, setShowModal] = useState(false);
    const [wardsLoading, setWardsLoading] = useState(false);
    const [tempSelectedWards, setTempSelectedWards] = useState([]);
    const [isMobile, setIsMobile] = useState(false);
    const [isRegionDropdownOpen, setIsRegionDropdownOpen] = useState(false);

    // Î™®Î∞îÏùº Í∞êÏßÄ
    useEffect(() => {
        const checkMobile = () => {
            setIsMobile(window.innerWidth <= 768);
        };

        checkMobile();
        window.addEventListener('resize', checkMobile);

        return () => window.removeEventListener('resize', checkMobile);
    }, []);

    // API Í∏∞Î≥∏ URL
    const API_BASE_URL = '/api/region-list';

    // Íµ¨/Íµ∞ Î™©Î°ùÎßå APIÎ°ú Î°úÎìú 
    const loadWards = async (regionName) => {
        try {
            setWardsLoading(true);
            const response = await fetch(`${API_BASE_URL}/regions/${regionName}/wards`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.wards && data.wards.length > 0) {
                setWards(data.wards);
                console.log(`${regionName} Íµ¨/Íµ∞ Î™©Î°ù Î°úÎìú:`, data.wards);
            } else {
                console.warn(`${regionName}Ïóê Íµ¨/Íµ∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.`);
                setWards([]);
            }
        } catch (error) {
            console.error(`${regionName} Íµ¨/Íµ∞ Î°úÎìú Ïã§Ìå®:`, error.message);
            setWards([]);
        } finally {
            setWardsLoading(false);
        }
    };

    // ÏßÄÏó≠ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const handleRegionClick = async (regionName) => {
        console.log('üó∫Ô∏è ÏßÄÏó≠ ÏÑ†ÌÉù:', regionName);

        if (onRegionChange) {
            onRegionChange(regionName);
        }

        // Î™®Î∞îÏùºÏóêÏÑú ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
        if (isMobile) {
            setIsRegionDropdownOpen(false);
        }

        // Ï†ÑÍµ≠Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ Î™®Îã¨ Ïó¥Í∏∞
        if (regionName !== 'Ï†ÑÍµ≠') {
            // ÏßÄÏó≠Ïù¥ Î≥ÄÍ≤ΩÎêòÎ©¥ Íµ¨/Íµ∞ ÏÑ†ÌÉù Ï¥àÍ∏∞Ìôî
            if (onWardChange) {
                onWardChange([]);
            }
            setTempSelectedWards([]); // ÏûÑÏãú ÏÑ†ÌÉùÎèÑ Ï¥àÍ∏∞Ìôî
            await loadWards(regionName);
            setShowModal(true);
        } else {
            // Ï†ÑÍµ≠ ÏÑ†ÌÉù Ïãú Íµ¨/Íµ∞ ÏÑ†ÌÉù Ï¥àÍ∏∞Ìôî
            if (onWardChange) {
                onWardChange([]);
            }
        }
    };

    // Î™®Îã¨ÏóêÏÑú Íµ¨/Íµ∞ ÏÑ†ÌÉù/Ìï¥Ï†ú
    const handleModalWardToggle = (wardName) => {
        setTempSelectedWards(prev => {
            if (prev.includes(wardName)) {
                return prev.filter(ward => ward !== wardName);
            } else {
                return [...prev, wardName];
            }
        });
    };

    // Î™®Îã¨ÏóêÏÑú Ï†ÑÏ≤¥ ÏÑ†ÌÉù
    const handleSelectAllInModal = () => {
        if (tempSelectedWards.length === wards.length) {
            // Î™®Îì† Íµ¨/Íµ∞Ïù¥ ÏÑ†ÌÉùÎêú ÏÉÅÌÉúÎ©¥ Ï†ÑÏ≤¥ Ìï¥Ï†ú
            setTempSelectedWards([]);
        } else {
            // Ï†ÑÏ≤¥ ÏÑ†ÌÉù
            setTempSelectedWards([...wards]);
        }
    };

    // Î™®Îã¨ÏóêÏÑú ÌôïÏù∏ Î≤ÑÌäº
    const handleModalConfirm = () => {
        if (onWardChange) {
            onWardChange(tempSelectedWards);
        }
        setShowModal(false);
    };

    // Î™®Îã¨ÏóêÏÑú Ï∑®ÏÜå Î≤ÑÌäº
    const handleModalCancel = () => {
        setTempSelectedWards([...selectedWards]); // ÏõêÎûò ÏÉÅÌÉúÎ°ú Î≥µÏõê
        setShowModal(false);
    };
    // Íµ¨/Íµ∞ Îã§Ïãú ÏÑ†ÌÉù Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ (ÏÉàÎ°ú Ï∂îÍ∞Ä)
    const handleReselectWards = async () => {
        if (selectedRegion && selectedRegion !== 'Ï†ÑÍµ≠') {
            setTempSelectedWards([...selectedWards]); // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Íµ¨/Íµ∞ÏúºÎ°ú Ï¥àÍ∏∞Ìôî
            await loadWards(selectedRegion);
            setShowModal(true);
        }
    };

    // Î≤ÑÌäº Ïä§ÌÉÄÏùº Ìï®Ïàò
    const getButtonStyle = (isSelected, baseColor = '#3498db') => ({
        padding: '10px 18px',
        margin: '6px',
        border: isSelected ? `2px solid ${baseColor}` : '2px solid #e1e8ed',
        borderRadius: '25px',
        background: isSelected ? baseColor : 'white',
        color: isSelected ? 'white' : '#2c3e50',
        cursor: 'pointer',
        fontSize: '14px',
        fontWeight: isSelected ? '600' : '500',
        transition: 'all 0.3s ease',
        display: 'inline-block',
        boxShadow: isSelected ? `0 4px 12px ${baseColor}40` : '0 2px 4px rgba(0,0,0,0.1)',
        transform: isSelected ? 'translateY(-1px)' : 'translateY(0)',
        userSelect: 'none'
    });
    // Íµ¨/Íµ∞ Îã§Ïãú ÏÑ†ÌÉù Î≤ÑÌäº Ïä§ÌÉÄÏùº (ÏÉàÎ°ú Ï∂îÍ∞Ä)
    const getReselectButtonStyle = () => ({
        padding: isMobile ? '6px 12px' : '8px 16px',
        border: '2px solid #f39c12',
        borderRadius: '20px',
        background: '#f39c12',
        color: 'white',
        cursor: 'pointer',
        fontSize: isMobile ? '11px' : '12px',
        fontWeight: '600',
        transition: 'all 0.3s ease',
        boxShadow: '0 2px 6px rgba(243, 156, 18, 0.3)',
        marginLeft: isMobile ? '6px' : '8px',
        display: 'inline-flex',
        alignItems: 'center',
        gap: '4px'
    });
    // Î™®Îã¨ Î≤ÑÌäº Ïä§ÌÉÄÏùº
    const getModalButtonStyle = (isSelected, baseColor = '#27ae60') => ({
        padding: '8px 16px',
        margin: '4px',
        border: isSelected ? `2px solid ${baseColor}` : '2px solid #e1e8ed',
        borderRadius: '20px',
        background: isSelected ? baseColor : 'white',
        color: isSelected ? 'white' : '#2c3e50',
        cursor: 'pointer',
        fontSize: '13px',
        fontWeight: isSelected ? '600' : '500',
        transition: 'all 0.3s ease',
        boxShadow: isSelected ? `0 3px 8px ${baseColor}40` : '0 2px 4px rgba(0,0,0,0.1)',
        transform: isSelected ? 'translateY(-1px)' : 'translateY(0)',
        userSelect: 'none'
    });


    const titleStyle = {
        margin: '0 0 15px 0',
        fontSize: isMobile ? '16px' : '18px',
        fontWeight: '600',
        color: '#2c3e50',
        display: 'flex',
        alignItems: 'center',
        gap: '8px'
    };

    const buttonContainerStyle = {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '4px',
        justifyContent: 'center'
    };

    // ÎìúÎ°≠Îã§Ïö¥ Ïä§ÌÉÄÏùº
    const regionDropdownStyle = {
        position: 'relative',
        width: '100%'
    };

    const regionDropdownButtonStyle = {
        width: '100%',
        padding: '12px 16px',
        border: '2px solid #e1e8ed',
        borderRadius: '12px',
        background: 'white',
        cursor: 'pointer',
        fontSize: '14px',
        textAlign: 'left',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        transition: 'all 0.2s ease',
        borderColor: isRegionDropdownOpen ? '#3498db' : '#e1e8ed'
    };

    const regionDropdownListStyle = {
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        background: 'white',
        border: '2px solid #e1e8ed',
        borderRadius: '12px',
        boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
        zIndex: 100,
        maxHeight: '250px',
        overflowY: 'auto',
        marginTop: '4px'
    };

    const regionDropdownItemStyle = {
        padding: '12px 16px',
        cursor: 'pointer',
        fontSize: '14px',
        borderBottom: '1px solid #f1f1f1',
        transition: 'background-color 0.2s ease'
    };

    // Î™®Îã¨ Ïä§ÌÉÄÏùº
    const modalOverlayStyle = {
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000,
        padding: '20px',
        boxSizing: 'border-box'
    };

    const modalContentStyle = {
        backgroundColor: 'white',
        borderRadius: '16px',
        padding: '24px',
        maxWidth: '600px',
        width: '100%',
        maxHeight: '80vh',
        overflowY: 'auto',
        boxShadow: '0 10px 40px rgba(0,0,0,0.2)',
        position: 'relative'
    };

    const modalHeaderStyle = {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px',
        paddingBottom: '15px',
        borderBottom: '2px solid #f1f1f1'
    };

    const modalButtonContainerStyle = {
        display: 'flex',
        flexWrap: 'wrap',
        gap: '8px',
        marginBottom: '20px',
        maxHeight: '300px',
        overflowY: 'auto',
        padding: '10px',
        backgroundColor: '#f8f9fa',
        borderRadius: '8px'
    };

    const modalFooterStyle = {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        gap: '12px',
        marginTop: '20px',
        paddingTop: '15px',
        borderTop: '2px solid #f1f1f1'
    };
    const sectionStyle = {
        marginBottom: '25px',
        padding: isMobile ? '15px' : '20px',
        backgroundColor: '#e8f4f8', 
        borderRadius: '12px',
        border: '1px solid #b8e0d2' 
    };

    return (
        <div style={{
            width: '100%',
            maxWidth: isMobile ? '100%' : '1200px',
            backgroundColor: 'white',
            padding: isMobile ? '15px' : '25px',
            borderRadius: '16px',
            boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
            fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
            margin: '0 auto'
        }}>

            <h2 style={{
                textAlign: 'center',
                margin: '0 0 30px 0',
                color: '#2c3e50',
                fontSize: isMobile ? '20px' : '24px',
                fontWeight: '700'
            }}>
                üó∫Ô∏è ÏßÄÏó≠ ÏÑ†ÌÉù
            </h2>

            {/* ÏßÄÏó≠ ÏÑ†ÌÉù ÏÑπÏÖò */}
            <div style={sectionStyle}>
                <h3 style={titleStyle}>
                    <span>üìç</span>
                    Ïãú/ÎèÑ ÏÑ†ÌÉù
                    <span style={{
                        fontSize: '12px',
                        color: '#7f8c8d',
                        fontWeight: '400',
                        marginLeft: '8px'
                    }}>
                        {isMobile ? '(ÌÑ∞ÏπòÌï¥ÏÑú ÏÑ†ÌÉù)' : '(ÏßÄÏó≠ÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ Íµ¨/Íµ∞ ÏÑ†ÌÉù Ï∞ΩÏù¥ Ïó¥Î¶ΩÎãàÎã§)'}
                    </span>
                </h3>

                {/* Î™®Î∞îÏùº: ÎìúÎ°≠Îã§Ïö¥ Î∞©Ïãù */}
                {isMobile ? (
                    <div style={regionDropdownStyle}>
                        <button
                            style={regionDropdownButtonStyle}
                            onClick={() => setIsRegionDropdownOpen(!isRegionDropdownOpen)}
                        >
                            <span style={{
                                color: selectedRegion ? '#2c3e50' : '#7f8c8d',
                                fontWeight: selectedRegion ? '600' : '400'
                            }}>
                                {/* ‚úÖ ÏàòÏ†ï: Îπà Î¨∏ÏûêÏó¥Ïùº Îïå ÏïàÎÇ¥ Î¨∏Íµ¨ ÌëúÏãú */}
                                {selectedRegion || 'Ïãú/ÎèÑÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'}
                            </span>
                            <span style={{
                                transform: isRegionDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)',
                                transition: 'transform 0.2s ease',
                                color: '#7f8c8d'
                            }}>
                                ‚ñº
                            </span>
                        </button>

                        {isRegionDropdownOpen && (
                            <div style={regionDropdownListStyle}>
                                {regions.map((region, index) => (
                                    <div
                                        key={region}
                                        style={{
                                            ...regionDropdownItemStyle,
                                            backgroundColor: selectedRegion === region ? '#e8f4f8' : 'white',
                                            color: selectedRegion === region ? '#3498db' : '#2c3e50',
                                            fontWeight: selectedRegion === region ? '600' : '400',
                                            borderBottom: index === regions.length - 1 ? 'none' : '1px solid #f1f1f1'
                                        }}
                                        onClick={() => handleRegionClick(region)}
                                        onTouchStart={(e) => {
                                            e.target.style.backgroundColor = selectedRegion === region ? '#d4edda' : '#f8f9fa';
                                        }}
                                        onTouchEnd={(e) => {
                                            setTimeout(() => {
                                                e.target.style.backgroundColor = selectedRegion === region ? '#e8f4f8' : 'white';
                                            }, 150);
                                        }}
                                    >
                                        {region} {selectedRegion === region && '‚úì'}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                ) : (
                    /* Îç∞Ïä§ÌÅ¨ÌÜ±: Í∏∞Ï°¥ Î≤ÑÌäº Î∞©Ïãù */
                    <div style={buttonContainerStyle}>
                        {regions.map((region) => (
                            <button
                                key={region}
                                style={getButtonStyle(selectedRegion === region, '#3498db')}
                                onClick={() => handleRegionClick(region)}
                                onMouseEnter={(e) => {
                                    if (selectedRegion !== region) {
                                        e.target.style.backgroundColor = '#ecf0f1';
                                        e.target.style.transform = 'translateY(-2px)';
                                        e.target.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                                    }
                                }}
                                onMouseLeave={(e) => {
                                    if (selectedRegion !== region) {
                                        e.target.style.backgroundColor = 'white';
                                        e.target.style.transform = 'translateY(0)';
                                        e.target.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                                    }
                                }}
                            >
                                {region}
                            </button>
                        ))}
                    </div>
                )}
            </div>

            {/* ÎìúÎ°≠Îã§Ïö¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞ */}
            {isMobile && isRegionDropdownOpen && (
                <div
                    style={{
                        position: 'fixed',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        zIndex: 50
                    }}
                    onClick={() => setIsRegionDropdownOpen(false)}
                />
            )}

            {/* ÌòÑÏû¨ ÏÑ†ÌÉù ÏÉÅÌÉú ÌëúÏãú */}
            <div style={{
                padding: isMobile ? '12px' : '15px',
                backgroundColor: '#e8f4f8',
                borderRadius: '10px',
                textAlign: 'center',
                marginTop: '20px',
                border: '1px solid #b8e0d2'
            }}>
                <div style={{
                    fontSize: isMobile ? '13px' : '14px',
                    color: '#2c3e50',
                    fontWeight: '500',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    flexWrap: 'wrap',
                    gap: '8px'
                }}>
                    <span>ÌòÑÏû¨ ÏÑ†ÌÉù:</span>
                    <strong style={{ color: '#3498db' }}>
                        {/* ‚úÖ ÏàòÏ†ï: Îπà Î¨∏ÏûêÏó¥Ïùº Îïå ÎØ∏ÏÑ†ÌÉù ÏÉÅÌÉú ÌëúÏãú */}
                        {selectedRegion || 'ÏßÄÏó≠ ÎØ∏ÏÑ†ÌÉù'}
                    </strong>
                    {selectedWards.length > 0 && (
                        <>
                            <span style={{ color: '#7f8c8d' }}>‚Üí</span>
                            <strong style={{ color: '#27ae60' }}>
                                {selectedWards.length === 1 ?
                                    selectedWards[0] :
                                    `${selectedWards.slice(0, 2).join(', ')}${selectedWards.length > 2 ? ` Ïô∏ ${selectedWards.length - 2}Í∞ú` : ''}`
                                }
                            </strong>
                            {/* Íµ¨/Íµ∞ Îã§Ïãú ÏÑ†ÌÉù Î≤ÑÌäº Ï∂îÍ∞Ä */}
                            <button
                                style={getReselectButtonStyle()}
                                onClick={handleReselectWards}
                            >
                                üîÑ Îã§Ïãú ÏÑ†ÌÉù
                            </button>
                        </>
                    )}
                    {/* Ï†ÑÍµ≠Ïù¥ ÏïÑÎãå Ïãú/ÎèÑÍ∞Ä ÏÑ†ÌÉùÎêòÏóàÏßÄÎßå Íµ¨/Íµ∞Ïù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎèÑ Î≤ÑÌäº ÌëúÏãú */}
                    {selectedRegion && selectedRegion !== 'Ï†ÑÍµ≠' && selectedWards.length === 0 && (
                        <button
                            style={getReselectButtonStyle()}
                            onClick={handleReselectWards}
                        >
                            üìç Íµ¨/Íµ∞ ÏÑ†ÌÉù
                        </button>
                    )}
                </div>

                <div style={{
                    fontSize: isMobile ? '11px' : '12px',
                    color: '#7f8c8d',
                    marginTop: '8px'
                }}>
                    {/* ‚úÖ ÏàòÏ†ï: Îπà Î¨∏ÏûêÏó¥ ÏÉÅÌÉú Ï≤òÎ¶¨ */}
                    {!selectedRegion ? (
                        'ÏßÄÏó≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'
                    ) : selectedRegion === 'Ï†ÑÍµ≠' ? (
                        'Ï†ÑÍµ≠ Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§'
                    ) : selectedRegion && selectedWards.length === 0 ? (
                        `${selectedRegion} Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§`
                    ) : selectedRegion && selectedWards.length > 0 ? (
                        `${selectedRegion} ${selectedWards.length}Í∞ú Íµ¨/Íµ∞ Îç∞Ïù¥ÌÑ∞Î•º ÌëúÏãúÌï©ÎãàÎã§`
                    ) : (
                        'ÏßÄÏó≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'
                    )}
                </div>

                
            </div>
            {/* Íµ¨/Íµ∞ ÏÑ†ÌÉù Î™®Îã¨ */}
            {showModal && (
                <div style={modalOverlayStyle} onClick={handleModalCancel}>
                    <div style={{
                        ...modalContentStyle,
                        maxWidth: isMobile ? '90vw' : '600px',
                        padding: isMobile ? '16px' : '24px'
                    }} onClick={(e) => e.stopPropagation()}>
                        {/* Î™®Îã¨ Ìó§Îçî */}
                        <div style={modalHeaderStyle}>
                            <div>
                                <h3 style={{
                                    margin: 0,
                                    fontSize: isMobile ? '18px' : '20px',
                                    fontWeight: '600',
                                    color: '#2c3e50'
                                }}>
                                    üèòÔ∏è {selectedRegion} Íµ¨/Íµ∞ ÏÑ†ÌÉù
                                </h3>
                                <p style={{
                                    margin: '5px 0 0 0',
                                    fontSize: isMobile ? '11px' : '12px',
                                    color: '#7f8c8d'
                                }}>
                                    ÏõêÌïòÎäî Íµ¨/Íµ∞ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî (Îã§Ï§ë ÏÑ†ÌÉù Í∞ÄÎä•)
                                </p>
                            </div>
                            <button
                                onClick={handleModalCancel}
                                style={{
                                    background: 'none',
                                    border: 'none',
                                    fontSize: isMobile ? '20px' : '24px',
                                    cursor: 'pointer',
                                    color: '#95a5a6',
                                    padding: '0',
                                    width: isMobile ? '24px' : '30px',
                                    height: isMobile ? '24px' : '30px',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center'
                                }}
                            >
                                √ó
                            </button>
                        </div>

                        {/* Î°úÎî© ÏÉÅÌÉú */}
                        {wardsLoading ? (
                            <div style={{
                                textAlign: 'center',
                                padding: isMobile ? '30px' : '40px',
                                color: '#7f8c8d'
                            }}>
                                üîÑ Íµ¨/Íµ∞ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...
                            </div>
                        ) : (
                            <>
                                {/* Ï†ÑÏ≤¥ ÏÑ†ÌÉù Î≤ÑÌäº */}
                                <div style={{ marginBottom: '15px' }}>
                                    <button
                                        onClick={handleSelectAllInModal}
                                        style={{
                                            ...getModalButtonStyle(tempSelectedWards.length === wards.length, '#e74c3c'),
                                            fontSize: isMobile ? '13px' : '14px',
                                            padding: isMobile ? '8px 16px' : '10px 20px'
                                        }}
                                    >
                                        {tempSelectedWards.length === wards.length ? 'Ï†ÑÏ≤¥ Ìï¥Ï†ú' : 'Ï†ÑÏ≤¥ ÏÑ†ÌÉù'}
                                    </button>
                                    <span style={{
                                        marginLeft: isMobile ? '8px' : '10px',
                                        fontSize: isMobile ? '11px' : '12px',
                                        color: '#7f8c8d'
                                    }}>
                                        ({tempSelectedWards.length}/{wards.length}Í∞ú ÏÑ†ÌÉùÎê®)
                                    </span>
                                </div>

                                {/* Íµ¨/Íµ∞ Î≤ÑÌäºÎì§ */}
                                <div style={{
                                    ...modalButtonContainerStyle,
                                    maxHeight: isMobile ? '200px' : '300px',
                                    padding: isMobile ? '8px' : '10px'
                                }}>
                                    {wards.map((ward) => (
                                        <button
                                            key={ward}
                                            style={getModalButtonStyle(tempSelectedWards.includes(ward), '#27ae60')}
                                            onClick={() => handleModalWardToggle(ward)}
                                            onMouseEnter={(e) => {
                                                if (!tempSelectedWards.includes(ward)) {
                                                    e.target.style.backgroundColor = '#d5f4e6';
                                                    e.target.style.transform = 'translateY(-2px)';
                                                }
                                            }}
                                            onMouseLeave={(e) => {
                                                if (!tempSelectedWards.includes(ward)) {
                                                    e.target.style.backgroundColor = 'white';
                                                    e.target.style.transform = 'translateY(0)';
                                                }
                                            }}
                                        >
                                            {ward}
                                        </button>
                                    ))}
                                </div>
                            </>
                        )}

                        {/* Î™®Îã¨ Ìë∏ÌÑ∞ */}
                        <div style={modalFooterStyle}>
                            <div style={{
                                fontSize: isMobile ? '11px' : '12px',
                                color: '#7f8c8d'
                            }}>
                                {tempSelectedWards.length > 0 ?
                                    `${tempSelectedWards.length}Í∞ú Íµ¨/Íµ∞Ïù¥ ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§` :
                                    'ÏÑ†ÌÉùÎêú Íµ¨/Íµ∞Ïù¥ ÏóÜÏäµÎãàÎã§ (Ï†ÑÏ≤¥ ÏßÄÏó≠Ïù¥ ÎåÄÏÉÅ)'
                                }
                            </div>
                            <div style={{ display: 'flex', gap: isMobile ? '6px' : '8px' }}>
                                <button
                                    onClick={handleModalCancel}
                                    style={{
                                        padding: isMobile ? '6px 12px' : '8px 16px',
                                        border: '2px solid #95a5a6',
                                        borderRadius: '8px',
                                        background: 'white',
                                        color: '#95a5a6',
                                        cursor: 'pointer',
                                        fontSize: isMobile ? '12px' : '14px',
                                        fontWeight: '500'
                                    }}
                                >
                                    Ï∑®ÏÜå
                                </button>
                                <button
                                    onClick={handleModalConfirm}
                                    style={{
                                        padding: isMobile ? '6px 12px' : '8px 16px',
                                        border: '2px solid #3498db',
                                        borderRadius: '8px',
                                        background: '#3498db',
                                        color: 'white',
                                        cursor: 'pointer',
                                        fontSize: isMobile ? '12px' : '14px',
                                        fontWeight: '600'
                                    }}
                                >
                                    ÌôïÏù∏
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
export default RegionSelector;